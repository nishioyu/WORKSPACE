#!%RUBY%
# coding : utf-8
Encoding.default_external = "utf-8"

begin
  require "monthly/after_receden"
  require "monthly/after_receden_common"
  require "monthly/after_receden_error"
  require "date"
  require "nkf"
  require "json"

rescue LoadError => err
    STDERR.puts "#{err.class}\n#{err.message}\n#{err.backtrace.join("\n")}"
    open(@errlog,"w"){|f|
      f.print "#{err.class}\n#{err.message}\n#{err.backtrace.join("\n")}"
    }
    raise "#{err.message}\n#{err.backtrace.join("\n")}"
end

class String
  unless self.method_defined? :match?
    def match?(regex)
      !!(self.match(regex))
    end
  end
end

class Csvline

  def set_tbl_tensu(tbl_tensu)
    @tbl_tensu=Hash.new
    @tbl_tensu=tbl_tensu
  end

  def tbl_tensu
    @tbl_tensu
  end

end


class KsnSort

  attr_accessor :khn_exists,:tsusoku_exists,:chuksncd,:chuksntsuban

  def initialize
    @khn_exists = false
    @tsusoku_exists = false
    @chuksncd = 0
    @chuksntsuban = ''
  end

  def clear
    initialize
  end

end

class Receden_check < Receden_common

  def initialize
    @cache_tensu = Hash.new
    @cache_byomei = Hash.new
    @cache_labor_sio = Hash.new
  end

  def format_baseymd(zai, sryym)
    day = zai.hash.map{|k, v| k =~/^DAY[0-3][0-9]$/ && !v.value.empty? ? k.delete("DAY") : nil}.compact.first
    day.nil? ? "#{sryym}01" : "#{sryym}#{day}"
  end

  def select_tensu(hospnum,srycd,sryymd)

    ret=Hash.new
    sryymd=wtos(sryymd)
    if @cache_tensu.key?(srycd)
      @cache_tensu[srycd].each{|c|
        if sryymd >= c["YUKOSTYMD"] && sryymd <= c["YUKOEDYMD"]
          ret = c
          break
        end
      }
    else
      @cache_tensu[srycd] = Array.new
    end

    if ret.empty?

      sql = <<"SQL"
select a.*,b.usertanicd,b.usertaniname
from tbl_tensu a
  left join tbl_tensuplus b on (
        a.hospnum = b.hospnum
    and a.srycd = b.srycd
    and substr(b.srycd,1,1) in ('6','7')
    and '#{sryymd}' between b.yukostymd and b.yukoedymd
  )
where a.hospnum = 1
and   a.srycd = '#{srycd}'
and   '#{sryymd}' between a.yukostymd and a.yukoedymd
order by b.yukoedymd desc limit 1;
SQL

      begin
        data=JSON.load(`#{ENV['MONSQL']} -dir #{ENV['LDDIRECTORY']} -c "#{sql}"`)
      rescue  => err
        STDERR.puts err.message
        data=nil
      end
      if data != nil && data.size > 0
        ret = Hash[data[0].map{|k,v|[k.upcase , v]}]
        unless ret['USERTANICD']
          ret['TANICD'] = ret['USERTANICD']
          ret['TANINAME'] = ret['USERTANINAME']
        end
        @cache_tensu[srycd] << ret
      end
    end
    return ret

  end

  def select_byomei(byomeicd)

    ret=Hash.new
    if @cache_byomei.key?(byomeicd)
      ret = @cache_byomei[byomeicd]
    else
      sql = "select * from tbl_byomei where BYOMEICD = '#{byomeicd}' "
	  begin
        data=JSON.load(`#{ENV['MONSQL']} -dir #{ENV['LDDIRECTORY']} -c "#{sql}"`)
      rescue  => err
        STDERR.puts err.message
        data=nil
      end
      if data != nil && data.size > 0
        ret = Hash[data[0].map{|k,v|[k.upcase , v]}]
        @cache_byomei[byomeicd] = ret
      end
    end

    return ret

  end

  def select_labor_sio(syocd,sryymd)
    ret=Hash.new
    sryymd=wtos(sryymd)
    if @cache_labor_sio.key?(syocd)
      @cache_labor_sio[syocd].each{|c|
        if sryymd >= c["YUKOSTYMD"] && sryymd <= c["YUKOEDYMD"]
          ret = c
          break
        end
      }
    else
      @cache_labor_sio[syocd] = Array.new
    end

    if ret.empty?
      sql="select * from tbl_labor_sio where " +
          "SYOCD = '#{syocd}' and '#{sryymd}' between YUKOSTYMD and YUKOEDYMD"
      begin
        data=JSON.load(`#{ENV['MONSQL']} -dir #{ENV['LDDIRECTORY']} -c "#{sql}"`)
      rescue  => err
        STDERR.puts err.message
        data=nil
      end
      if data != nil && data.size > 0
        ret = Hash[data[0].map{|k,v|[k.upcase , v]}]
        @cache_labor_sio[syocd] << ret
      end
    end

    return ret

  end

  def edit_msg(csv,key)

    ret=""

    if csv.nil?
    else
      if csv.hash.key?("RECID")
        id=csv["RECID"].value
        if @info.rec.key?(id)
          if @info[id].hash.key?(key)
            myvalue=csv[key].value
            if myvalue.split(//).size > 20
               myvalue=myvalue.split(//)[0,4].join << "…"
            end
            ret=sprintf("%s［%s］",@info[id].hash[key].label,myvalue)
          end
        end
      end
    end

    return ret

  end

  def check_format(rece,rows)

    if rows.hash.key?("RECID")

      id=rows["RECID"].value

      if @info.rec.key?(id)
        @info[id].rows.each{|item|
          if item.required? && rows[item.name].value.strip == ""
              @errors.push("20210",rece,rows,item.name)
          else
            sjisStr=NKF.nkf("-Wsx", rows[item.name].value)
            if item.maxsize < sjisStr.bytesize
              @errors.push("25390",rece,rows,item.name)
            else
              if item.fixed? && item.maxsize > sjisStr.bytesize
                @errors.push("25530",rece,rows,item.name)
              end
            end

            err=false
            case item.type
            when NUMERIC
              if rows[item.name].value =~ /^(|[0-9]+)$/
              else
                err=true
              end
            when ALPHANUMERIC
              if rows[item.name].hankaku != rows[item.name].value
                err=true
              end
            when KANJI
              if rows[item.name].zenkaku == rows[item.name].value
                if rows[item.name].value =~ /〓/
                  @errors.push("25441",rece,rows,item.name)
                end
              else
                err=true
              end
            when KATAKANA
              if rows[item.name].katakana != rows[item.name].value
                if rows[item.name].value =~ /〓/
                  @errors.push("25441",rece,rows,item.name)
                else
                  err=true
                end
              end
            when TEXT
              if ( rows[item.name].zenkaku == rows[item.name].value ) ||
                ( rows[item.name].hankaku == rows[item.name].value )
                if rows[item.name].value =~ /〓/
                  @errors.push("25441",rece,rows,item.name)
                end
              else
                err=true
              end
            end
            if  err == true
              @errors.push("25430",rece,rows,item.name)
            end
          end
        }
      end
      if @info[id].rows.size != rows.rows.size
        @errors.push("25420",rece,rows)
      end
    end
  end

  def check_lv1(r)

    case r.ir.size
    when 0
      @errors.push("19281")
    when 1
      if r.receipt.empty?
        @errors.push("19283")
      else
        if (r.receipt[0].re.empty? ) || (r.ir[0].line != r.receipt[0].re[0].line - 1)
          @errors.push("19230")
        end
      end
      if r.ir[0]["SKYYM"].wtos == ""
        @errors.push("19284",nil,r.ir[0],"SKYYM")
      end
    else
      @errors.push("19282")
    end

    case r.as.size
    when 0
      @errors.push("10001")
    when 1
    else
      @errors.push("10002")
    end
  end

  def check_as(r)

    as=r.as.first

    if as["TANKA"].value == ""
        @errors.push("10010",nil,as,"TANKA")
    else
      case as["TANKA"].value.to_i
      when 1150,1200
      else
        @errors.push("10020",nil,as,"TANKA")
      end
    end

    if as["HOSPKBN"].value == ""
        @errors.push("10050",nil,as,"HOSPKBN")
    else
      case as["HOSPKBN"].value
      when "1","2","3"
      else
        @errors.push("10060",nil,as,"HOSPKBN")
      end
    end

    if as["SKYYMD"].wYmdtos == ""
        @errors.push("10090",nil,as,"SKYYMD")
    end

    if as["ZIPCD"].value =~ /^(|[0-9]{7})$/
    else
        @errors.push("10130",nil,as,"ZIPCD")
    end

    if as["LOCATION"].value.strip == ""
        @errors.push("10140",nil,as,"LOCATION")
    end

    if as["NAME"].value.strip == ""
        @errors.push("10150",nil,as,"NAME")
    end

    if as["HOSPCD"].value.strip == ""
      @errors.push("10200",nil,as,"HOSPCD")
    else
        if as["HOSPCD"].value =~ /^[0-9]{7}*$/
        else
          @errors.push("10210",nil,as,"HOSPCD")
        end
    end

    err_ryoedymd = false
    gokei = 0
    maisu = 0
    kyufu_key=Array.new

    r.receipt.each{|rece|
      #    RE,RRレコードは配列としているが、レセプト毎に通常は１件
      re=rece.re.first
      if rece.ar.empty?
      else
        ar=rece.ar.first
        if as["SKYYMD"].wYmdtos != "" && ar["SINYMD"].wYmdtos != ""
          if as["SKYYMD"].wYmdtos < ar["SINYMD"].wYmdtos
            err_ryoedymd = true
          end
        end
        if as["SKYYMD"].wYmdtos != "" && ar["KENYMD"].wYmdtos != ""
          if as["SKYYMD"].wYmdtos < ar["KENYMD"].wYmdtos
            err_ryoedymd = true
          end
        end
        gokei += ar["GOKEI"].value.to_i
        kyufu_key << rece.kyufu_key
      end
    }

    r.receipt.each{|rece|
      if kyufu_key.index(rece.kyufu_key) != kyufu_key.rindex(rece.kyufu_key)
        @errors.push("37650",rece)
      end
    }

    if err_ryoedymd == true
      @errors.push("10100",nil,as,"SKYYMD")
    end

    if gokei != as["SKYMONEY"].value.to_i
      @errors.push("10310",nil,as,"SKYMONEY",nil,"アフターケアレセプト合計額［#{gokei}］")
    end

    if r.receipt.size != as["MAISU"].value.to_i
      @errors.push("10320",nil,as,"MAISU",nil,"アフターケアレセプト件数［#{ r.receipt.size}］")
    end

  end

  def check_re(r,rece)

    re=rece.re.first
    ar=rece.ar.first

    if re["SRYKA1_CD"].value != ""
      if RECEKA.key?(re["SRYKA1_CD"].value)
      else
        @errors.push("20220",rece,re,"SRYKA1_CD")
      end
    end

    if re["SRYKA2_CD"].value != ""
      if RECEKA.key?(re["SRYKA2_CD"].value)
      else
        @errors.push("20220",rece,re,"SRYKA2_CD")
      end
    end

    if re["SRYKA3_CD"].value != ""
      if RECEKA.key?(re["SRYKA3_CD"].value)
      else
        @errors.push("20220",rece,re,"SRYKA3_CD")
      end
    end

    if @skykbn == "2"
      if re["SELNUM"].value.strip == ""
        @errors.push("26510",rece,re,"SELNUM")
      end
    end

    if re["NAME"].value.strip == ""
      @errors.push("30010",rece,re,"NAME")
    end

    case re["SEX"].value
    when "1","2"
    else
      @errors.push("31330",rece,re,"SEX")
    end

    if re["BIRTHDAY"].wYmdtos == ""
      @errors.push("28500",rece,re,"BIRTHDAY")
    end

  end

  def check_ar(r,rece)

    re=rece.re.first
    ar=rece.ar.first

    if ar["SINYMD"].wtos != "" && ar["SINYMD"].wtos <= R021130
      @errors.push("10410",rece,ar,"SINYMD")
    end
    if ar["KENYMD"].wtos != "" && ar["KENYMD"].wtos <= R021130
      @errors.push("10410",rece,ar,"KENYMD")
    end

    if ar["SINYMD"].wYmdtos != "" &&  ar["KENYMD"].wYmdtos != ""
       if ar["SINYMD"].wYmdtos != ar["KENYMD"].wYmdtos
         @errors.push("21630",rece,ar,"SINYMD",nil,"検査年月日（健康診断年月日）［#{ ar["KENYMD"].value}］")
       end
    end

    if ar["KANANAME"].value.strip == ""
      @errors.push("20100",rece,ar,"KANANAME")
    end

    if ar["SINYMD"].value != "" && ar["SINYMD"].wYmdtos == ""
      @errors.push("21600",rece,ar,"SINYMD")
    else
      if re["BIRTHDAY"].wYmdtos != "" && ar["SINYMD"].value != "" && re["BIRTHDAY"].wYmdtos > ar["SINYMD"].wYmdtos
        @errors.push("38100",rece,ar,"SINYMD")
      end
    end

    if ar["KENYMD"].value != "" && ar["KENYMD"].wYmdtos == ""
      @errors.push("21610",rece,ar,"KENYMD")
    else
      if re["BIRTHDAY"].wYmdtos != "" && ar["KENYMD"].value != "" && re["BIRTHDAY"].wYmdtos > ar["KENYMD"].wYmdtos
        @errors.push("38100",rece,ar,"KENYMD")
      end
    end

    if ar["SINYMD"].wYmdtos[0,6] > r.ir.first["SKYYM"].wtos[0,6]
      @errors.push("21590",rece,ar,"SINYMD")
    end
    if ar["KENYMD"].wYmdtos[0,6] > r.ir.first["SKYYM"].wtos[0,6]
      @errors.push("21590",rece,ar,"KENYMD")
    end

    if ar["KEIKA"].value.strip == ""
      @errors.push("20140",rece,ar,"KEIKA")
    end

    if ar["TENSU"].value.strip == ""
      @errors.push("20150",rece,ar,"TENSU")
    end

    if ar["FORMSBT"].value.strip == ""
      @errors.push("20190",rece,ar,"FORMSBT")
    else
      case ar["FORMSBT"].value
      when "2"
      else
        @errors.push("20200",rece,ar,"FORMSBT")
      end
    end

    if SYOBYO.include?(ar["SYOBYO"].value)
    else
      @errors.push("28010",rece,ar,"SYOBYO")
    end

    if ar["SINYMD"].value == "" && ar["KENYMD"].value == ""
      @errors.push("28040",rece,ar,"SINYMD")
      #@errors.push("28040",rece,ar,"KENYMD")
    end

    if ar["KENNUM"].value[4,2] != ar["SYOBYO"].value
      @errors.push("28060",rece,ar,"KENNUM",nil,"傷病コード[#{ar["SYOBYO"].value}]")
      #@errors.push("28060",rece,ar,"SYOBYO")
    end

    if ar["ZENYMD"].value != "" && ar["ZENYMD"].wYmdtos == ""
      @errors.push("38040",rece,ar,"ZENYMD")
    end

    if ar["SYOBYO"].value == "00"
      if ar["SINYMD"].value != "" && ar["KENYMD"].value != ""
        @errors.push("39120",rece,ar,"SINYMD",nil,"検査年月日（健康診断年月日）［#{ ar["KENYMD"].value}］")
      end
    end
  end

  def check_sy_tekiyo(r,rece)

    ir=r.ir.first
    re=rece.re.first
    ar=rece.ar.first
    as=r.as.first

    shoshin_OK_days=Array.new.fill(false,1..31)
    latest_sryymd="00000000"

    shokei_tensu = 0
    shokei_kingaku = 0
    shokuji_kaisu = 0
    shokuji_kingaku = 0

    if rece.tekiyo.empty?
      @errors.push("25550",rece,nil)
    end

    srtSrykbn="00"

    rece.tekiyo.each{|tekiyo|

      if tekiyo.hokatsu == true
        next
      end

      myzaikaisu=nil
      myreceline=0
      flg_plus  = false
      flg_minus = false
      flg_kingaku_santei = false
      flg_shokuji = false
      ksnsort = KsnSort.new

      tekiyo.zai.each_with_index{|zai,zai_idx|
        case zai["RECID"].value
        when "RI","IY","TO","CO"
          baseymd = format_baseymd(zai, rece.sryym)
          zai.set_tbl_tensu(select_tensu(@hospnum,zai["SRYCD"].value,baseymd))
          if zai.tbl_tensu.empty?
          else
            if tekiyo.srykbn == "97" &&
               zai["RECID"].value == "RI" &&
               zai.tbl_tensu["NYUTENTTLKBN"].to_i == 970 &&
               zai.tbl_tensu["KOKUJISKBKBN2"].to_i == 1
               flg_shokuji = true
            end
          end
        else
          zai.set_tbl_tensu(nil)
        end
      }

      tekiyo.zai.each_with_index{|zai,zai_idx|

        tbl_tensu = zai.tbl_tensu
        if rece.sbt.exists?
        else
          next
        end

        if zai.hash.key?("SRYKBN") && zai["SRYKBN"].value != ""

          flg_plus  = false
          flg_minus = false

          if zai["SRYKBN"].value < srtSrykbn
            @errors.push("23060",rece,zai,"SRYKBN",nil,"前回診療識別［#{srtSrykbn}］")
          end

          srtSrykbn = zai["SRYKBN"].value

        end



        case zai["RECID"].value
        when  "RI","IY","TO","CO"
          if tbl_tensu["TENSIKIBETU"].to_i == 7
            flg_minus = true
          else
            flg_plus  = true
          end

          if zai["SRYCD"].hankaku[0,1] =~ /[1678]/
            if tbl_tensu.empty?
              @errors.push("33031",rece,zai,"SRYCD")
            else
              case  zai["RECID"].value
              when  "RI"

                case tbl_tensu["BYOSYOKBN"].to_i
                when 1,2,6
                  if re["BEDSU"].value.to_i < 1
                    @errors.push("36390",rece,re,"BEDSU",nil,tbl_tensu["NAME"])
                  end
                end

                if tbl_tensu["KZMCOMPSIKIBETU"].to_i == 1
                  if zai["SURYO"].value.to_i == 0
                    @errors.push("33040",rece,zai,"SURYO",nil,tbl_tensu["NAME"])
                  else
                    case tbl_tensu["KZMERR"].to_i
                    when 2,3
                      if  tbl_tensu["KZMKGN"].to_i - tbl_tensu["KZM"].to_i >= zai["SURYO"].value.to_i
                        myfooter=sprintf("%s %d%s",tbl_tensu["NAME"],zai["SURYO"].value.to_i,tbl_tensu["TANINAME"])
                        @errors.push("33170",rece,zai,"SURYO",nil,myfooter)
                      end
                    end
                  end
                end

                if flg_minus == false
                  shokei_tensu   += zai["TEN"].value.to_i   * zai["KAISU"].value.to_i
                else
                  shokei_tensu   -= zai["TEN"].value.to_i   * zai["KAISU"].value.to_i
                end
                shokei_kingaku += zai["KINGAKU"].value.to_i * zai["KAISU"].value.to_i

                case tbl_tensu["KOKUJISKBKBN1"].to_i
                when 1,3,5
                  ksnsort.clear
                  ksnsort.khn_exists = true
                  ksnsort.chuksncd = tbl_tensu["CHUKSNCD"].to_i
                when 7
                  if ksnsort.tsusoku_exists == true
                    @errors.push("44360",rece,zai,nil,nil,tbl_tensu["NAME"])
                  else
                    if tbl_tensu["CHUKSNCD"].to_i != 0
                      case
                      when ksnsort.khn_exists == false
#                        @errors.push("46410",rece,zai,"CHUKSNCD",nil,tbl_tensu["NAME"])
                      when tbl_tensu["CHUKSNCD"].to_i != ksnsort.chuksncd
                        @errors.push("46411",rece,zai,"CHUKSNCD",nil,tbl_tensu["NAME"])
                      when tbl_tensu["CHUKSNTSUBAN"].strip == ksnsort.chuksntsuban
                        @errors.push("46120",rece,zai,"CHUKSNTSUBAN",nil,tbl_tensu["NAME"])
                      when tbl_tensu["CHUKSNTSUBAN"].strip < ksnsort.chuksntsuban
                        @errors.push("46410",rece,zai,"CHUKSNCD",nil,tbl_tensu["NAME"])
                      else
                        ksnsort.chuksntsuban = tbl_tensu["CHUKSNTSUBAN"].strip
                      end
                    end
                  end
                when 9
                  ksnsort.tsusoku_exists = true
                  if ksnsort.khn_exists == false
                    @errors.push("44350",rece,zai,nil,nil,tbl_tensu["NAME"])
                  end
                end
                case as["HOSPKBN"].value
                when "1","2"
                  if tbl_tensu["HOSPSRYKBN"].to_i == 2
                    @errors.push("44240",rece,zai,"SRYCD",nil,"#{tbl_tensu["NAME"]}")
                  end
                when "3"
                  if tbl_tensu["HOSPSRYKBN"].to_i == 1
                    @errors.push("46030",rece,zai,"SRYCD",nil,"#{tbl_tensu["NAME"]}")
                  end
                end
              when  "IY"

                case tbl_tensu["TENSIKIBETU"].to_i
                when 1
                 if zai["SURYO"].value.to_f == 0
                   @errors.push("33090",rece,zai,"SURYO",nil,tbl_tensu["NAME"])
                 end
                end

                  if flg_minus == false
                    shokei_tensu   += zai["TEN"].value.to_i   * zai["KAISU"].value.to_i
                  else
                    shokei_tensu   -= zai["TEN"].value.to_i   * zai["KAISU"].value.to_i
                  end

              when  "TO"

                case tbl_tensu["TENSIKIBETU"].to_i
                when 1,2,4,9
                 if zai["SURYO"].value.to_f == 0
                   @errors.push("33110",rece,zai,"SURYO",nil,tbl_tensu["NAME"])
                 end
                end

                case tbl_tensu["TENSIKIBETU"].to_i
                when 1,2,4
                 case
                 when tbl_tensu["TANICD"].to_i == 0 && zai["TANICD"].value.to_i == 0
                   @errors.push("43230",rece,zai,"TANICD",nil,tbl_tensu["NAME"])
                 when zai["TANICD"].value.to_i < 1 ||  zai["TANICD"].value.to_i > 61
                   @errors.push("34650",rece,zai,"TANICD",nil,tbl_tensu["NAME"])
                 end
                   
                end

                case tbl_tensu["TENSIKIBETU"].to_i
                when 2
                  if zai["TANKA"].value.to_i == 0
                   @errors.push("33130",rece,zai,"TANKA",nil,tbl_tensu["NAME"])
                  end
                end
                shokei_tensu   += zai["TEN"].value.to_i   * zai["KAISU"].value.to_i

              when  "CO"
              end
            end
          else
            @errors.push("23040",rece,zai,"SRYCD")
          end
        end

        flg_kaisu_edit = false

        zai.hash.each{|key,row|
          if key =~ /^COMCD/
            mycommoji=sprintf("%s%s","COMMENT",key.sub(/^COMCD/,""))
            if row.value  != ""
              baseymd = format_baseymd(zai, rece.sryym)
              com_tensu=select_tensu(@hospnum,row.value,baseymd)
              if row.value[0,1] != "8"
                @errors.push("23070",rece,zai,key)
              else
                if com_tensu.empty?
                  @errors.push("34500",rece,zai,key)
                else
                  error = check_comment(row.value, zai[mycommoji].value, "", com_tensu)
                  if error["CD"]
                    @errors.push(error["CD"], rece,zai,mycommoji,nil,error["FOOTER"])
                  end
                end
              end
            else
              if zai[mycommoji].value != ""
                @errors.push("23880",rece,zai,key,nil,"コメント文字［#{zai[mycommoji].value}］")
              end
            end
          end
        }

        #---------------------------------------------------------------------------------------------------
        #                   フォーマットチェック(SI,IY,TO,COレコード)
        case  zai["RECID"].value
        when  "RI"
          check_format(rece,zai)
        when  "IY"
          check_format(rece,zai)
        when  "TO"
          check_format(rece,zai)
        when  "CO"
          check_format(rece,zai)
        end
        #---------------------------------------------------------------------------------------------------

        case zai["RECID"].value
        when  "RI","IY","TO"

          if zai["TEN"].value.strip != ""

            if zai["RECID"].value == "IY"
              if flg_minus == true
                if flg_plus == true
                  @errors.push("33190",rece,zai)
                end
              end
            end
          else
            if zai["RECID"].value == "IY" && tbl_tensu["TENSIKIBETU"].to_i == 7
              @errors.push("33060",rece,zai,"TEN",nil,tbl_tensu["NAME"])
            end
          end

          if zai["KAISU"].value.to_i == 0
            @errors.push("23110",rece,zai,"KAISU")
          end

          if myzaikaisu.nil?
            myzaikaisu = zai["KAISU"].value
            myreceline = zai.receline
          else
            if  myzaikaisu != zai["KAISU"].value
              myfooter=sprintf("レセプト内レコード番号［%d］の回数［%s］",myreceline,myzaikaisu)
              @errors.push("23120",rece,zai,"KAISU",nil,myfooter)
            end
          end

          if zai["RECID"].value  == "RI" &&  tbl_tensu["TENSIKIBETU"].to_i == 1
            flg_kingaku_santei = true
          end
          flg_tensu_required = false
          case
          when ( tekiyo.zai[zai_idx + 1] == nil ) ||
               ( tekiyo.zai[zai_idx + 1].hash.key?("RECID") != nil  && zai["RECID"].value != tekiyo.zai[zai_idx + 1]["RECID"].value ) ||
               ( tekiyo.zai[zai_idx + 1].hash.key?("SRYKBN") == nil ) ||
               ( tekiyo.zai[zai_idx + 1]["SRYKBN"].value != "" )
            flg_tensu_required = true
          else
            if zai["RECID"].value == "RI"
              case
              when ( tbl_tensu["TENSIKIBETU"].to_i == 4 || tbl_tensu["TENSIKIBETU"].to_i == 7 )
                flg_tensu_required = true
              when ( tekiyo.srykbn =~ /^(11|12|13|14|97)$/) ||
                   ( tbl_tensu["JITUDAY"].to_i == 4 && tbl_tensu["DAYCNT"].to_i == 0 )
                case tbl_tensu["KOKUJISKBKBN1"].to_i
                when 1,3,5,7,9,8
                  if tekiyo.zai[zai_idx + 1].tbl_tensu.empty?
                    flg_tensu_required = true
                  else
                    if tekiyo.zai[zai_idx + 1].tbl_tensu["KOKUJISKBKBN1"].to_i == 7 ||
                       tekiyo.zai[zai_idx + 1].tbl_tensu["KOKUJISKBKBN1"].to_i == 9 ||
                       tekiyo.zai[zai_idx + 1].tbl_tensu["KOKUJISKBKBN1"].to_i == 8 
                    else
                      flg_tensu_required = true
                    end
                  end
                end
              end
            end
          end

          if flg_tensu_required == true
            if zai["RECID"].value == "RI"
              if @check_level == "1"
                if zai["TEN"].value.strip.empty? && zai["KINGAKU"].value.strip.empty?
                  @errors.push("38351",rece,zai,nil,nil,tbl_tensu["NAME"])
                end
                if flg_kingaku_santei == true && zai["KINGAKU"].value.to_i == 0
                  @errors.push("38380",rece,zai,"KINGAKU",nil,tbl_tensu["NAME"])
                end
              end
              if flg_kingaku_santei == false && zai["KINGAKU"].value.to_i != 0
                @errors.push("38390",rece,zai,"KINGAKU",nil,tbl_tensu["NAME"])
              end
            else
              if ( @check_level == "1" )
                if zai["RECID"].value == "IY" && tbl_tensu["TENSIKIBETU"].to_i == 7
                else
                  if zai["TEN"].value.strip.empty?
                    @errors.push("33071",rece,zai,"TEN",nil,tbl_tensu["NAME"])
                  end
                end
              end
            end
            flg_tensu_santei   = false
            flg_kingaku_santei = false
          end
        end

        if zai["RECID"].value == "CO"

          if zai["SRYCD"].value[0,1] != "8"
            @errors.push("23070",rece,zai,"SRYCD")
          else
            error = check_comment(zai["SRYCD"].value, zai["DATA"].value, zai["RECID"].value, tbl_tensu)
            if error["CD"]
              @errors.push(error["CD"], rece,zai,"DATA",nil,error["FOOTER"])
            end
          end
        end

        if tekiyo.srykbn =~ /^(01|99)$/
          if zai["RECID"].value == "CO"
          else
            @errors.push("23810",rece,zai,"RECID")
          end
        end
      }
    }

    if ar["TENSU"].value.to_i != shokei_tensu
      @errors.push("48410",rece,ar,"TENSU",nil,"摘要データの点数合計［#{shokei_tensu}］")
    end

    case as["TANKA"].value.to_i
    when 1150,1200
      if (ar["TENSU"].value.to_i * as["TANKA"].value.to_i / 100).to_i != ar["TENSU_KANZAN"].value.to_i
        @errors.push("48420",rece,ar,"TENSU_KANZAN")
      end
    end
    if ar["KINGAKU"].value.to_i  != shokei_kingaku
      @errors.push("48430",rece,ar,"KINGAKU",nil,"摘要データの金額合計［#{shokei_kingaku}］")
    end
    shokei_gokei = ar["TENSU_KANZAN"].value.to_i +  ar["KINGAKU"].value.to_i
    if shokei_gokei != ar["GOKEI"].value.to_i
      @errors.push("48450",rece,ar,"GOKEI",nil,"小計点数金額換算（イ）＋小計金額（ロ）[#{shokei_gokei}]")
    end
  end

  def check_sj(r,rece)

    re=rece.re.first

    if rece.sj.flatten.size >= 1000
      @errors.push("23820",rece)
    end
    rece.sj.each_with_index{|sj,i|
      sj.each{|sj_line|
        #---------------------------------------------------------------------------------------------------
        #              フォーマットチェック(SJレコード)
        check_format(rece,sj_line)
        #---------------------------------------------------------------------------------------------------
      }
    }
  end

  def check_receipt(r)

    ir=r.ir.first
    as=r.as.first
    receNum=1

    #---------------------------------------------------------------------------------------------------
    #    フォーマットチェック(IR,RSレコード)
    check_format(nil,ir)
    check_format(nil,as)
    #---------------------------------------------------------------------------------------------------

    check_as(r)

    r.receipt.each{|rece|

      #    REレコードは配列としているが、レセプト毎に通常は１件
      re=rece.re.first

      if re["RECENUM"].num != nil
        if re["RECENUM"].value.bytesize > 6
          @errors.push("19100",rece,re,"RECENUM")
        else
          if  re["RECENUM"].value.to_i != receNum
            @errors.push("19170",rece,re,"RECENUM")
          end
          receNum = re["RECENUM"].value.to_i + 1
        end
      else
        @errors.push("19100",rece,re,"RECENUM")
        receNum += 1
      end

      if wtos(rece.sryym) == ""
        @errors.push("21611",rece,re,"SKYINF")
        next
      end

      if rece.ar.empty?
        @errors.push("25400",rece,re)
        next
      end

      if rece.ar.size > 1
        @errors.push("25470",rece,re)
        next
      end

      #    RRレコードは配列としているが、レセプト毎に通常は１件
      ar=rece.ar.first

      #---------------------------------------------------------------------------------------------------
      #       フォーマットチェック(RE,RRレコード)
      check_format(rece,re)
      check_format(rece,ar)
      #---------------------------------------------------------------------------------------------------

      check_re(r,rece)
      check_ar(r,rece)
      check_sy_tekiyo(r,rece)
      check_sj(r,rece)

    }
  end

  def check_comment(srycd, comment, type, tbl_tensu)

    error = {}
    error["FOOTER"] = tbl_tensu["NAME"]

    case srycd[1,2]
    when "10" , "30"
      if comment_empty?(comment)
        error["CD"] = "34380"
      end
    when "31"
      if comment_empty?(comment)
        error["CD"] = "34380"
      else
        unless comment_srycd?(comment)
          error["CD"] = "34270"
        end
      end
    when "40","41"
      if comment_empty?(comment)
        error["CD"] = "34380"
      elsif comment.delete("０-９").empty?
        unless tbl_tensu.empty?
          comsize= tbl_tensu["SSTKIJUNCD2"].to_i + tbl_tensu["SSTKIJUNCD4"].to_i  + tbl_tensu["SSTKIJUNCD6"].to_i + tbl_tensu["SSTKIJUNCD8"].to_i
          if comment.split(//).size != comsize
            error["CD"] = "34400"
          end
        end
      else
        error["CD"] = "34390"
      end
    when "42"
      if comment_empty?(comment)
        error["CD"] = "34380"
      else
          unless comment.match?(/^[０-９＋－−．]+$/)
            error["CD"] = "34390"
          end
      end
    when "50"
      if comment_empty?(comment)
        error["CD"] = "34380"
      else
        unless comment_date?(comment, tbl_tensu)
          error["CD"] = "34270"
        end
      end
    when "51"
      if comment_empty?(comment)
        error["CD"] = "34380"
      else
        unless comment_time?(comment)
          error["CD"] = "34270"
        end
      end
    when "52"
      if comment_empty?(comment)
        error["CD"] = "34380"
      else
        unless comment_minute?(comment)
          error["CD"] = "34270"
        end
      end
    when "90"
      error["FOOTER"] = nil
      if comment_empty?(comment)
        error["CD"] = "34380"
      elsif comment.match?(/^(.{4})+$/)
        modcds=comment.scan(/.{4}/)
        if type != "CO" && modcds.size > 5
          error["CD"] = "23870"
        else
          modcds.each do |modcd|
            tbl_byomei=select_byomei(sprintf("ZZZ%s",modcd.tr("０-９","0-9")))
            if tbl_byomei.empty?
              error["CD"] = "33930"
              error["FOOTER"] = modcd
            end
          end
        end
      else
        error["CD"] = "23800"
      end
    end

    if error.key?("CD") && type != "CO"
      errocd_conversion = {
        "23800" => "23860",
        "33930" => "34590",
        "34270" => "34280",
        "34380" => "34410",
        "34390" => "34440",
        "34400" => "34470"
      }
      error["CD"] = error["CD"].sub(/^#{errocd_conversion.keys.join("|")}$/, errocd_conversion)
    end

    error

  end

  def comment_empty?(comment)
    comment.gsub(/　| /,"").empty?
  end

  def comment_srycd?(comment)
    comment.size == 9 && comment.match?(/^[１６７８][０-９]+$/)
  end

  def comment_date?(comment, tbl_tensu)

    return false unless comment.size == 7 

    ymd = if tbl_tensu.any? && !(tbl_tensu["NAME"].match?(/日/) || tbl_tensu["SRYCD"] == "850100137") && comment[5, 2] == "００"
            "#{comment[0,5]}０１"
          else
            comment
          end
    !(wtos(ymd.tr("０-９","0-9")).empty?)
  end

  def comment_time?(comment)
    return false if comment.size != 4  || !comment.match?(/^[０-９]+$/)
    return true if comment == "２４００"
    hour, minute = comment.tr("０-９","0-9").scan(/../)
    hour.to_i.between?(0,23) && minute.to_i.between?(0,59)
  end

  def comment_minute?(comment)
    comment.size == 5 && comment.match?(/^[０-９]+$/)
  end

  def main(_param)

    @hospnum,@recefile,@infile,@outfile,@errlog,@skykbn,@check_level=_param.split(",")

    mcp_tempdir=ENV['MCP_TEMPDIR']

    @infile=mcp_tempdir + "/" + @infile
    @outfile=mcp_tempdir + "/" + @outfile
    @errlog=mcp_tempdir + "/" + @errlog

    @info=Recinfo.new
    @errors=Receden_error.new(@recefile)

    r=Receden.new(@infile,@check_level)

    check_lv1(r)
    if @errors.empty?
      check_receipt(r)
    end
    @errors.write(@outfile)

  rescue => err
    STDERR.puts "#{err.class}\n#{err.message}\n#{err.backtrace.join("\n")}"
    open(@errlog,"w"){|f|
      f.print "#{err.class}\n#{err.message}\n#{err.backtrace.join("\n")}"
    }
    raise "#{err.message}\n#{err.backtrace.join("\n")}"
  end

end

receden_check = Receden_check.new
receden_check.main(ARGV.join(','))
