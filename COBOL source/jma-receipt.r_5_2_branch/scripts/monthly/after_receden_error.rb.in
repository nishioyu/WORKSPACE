#!%RUBY%
# coding : utf-8
Encoding.default_external = "utf-8"

require "monthly/after_receden_common"
require "nkf"

class Receden_error < Receden_common
  attr_accessor :errors
  class Erorr_info

    attr_accessor    :recenum,:receline,:filename,:ptnum,:name,:birthday,:sryym,:errcd,:recid,:line,:rownum,:label,:value,:msg,:header,:footer,:data,:kennum,:sinymd,:kenymd

    def initialize
      @recenum=""
      @receline=0
      @filename=""
      @ptnum=""
      @name=""
      @birthday=""
      @sryym=""
      @errcd=""
      @recid=""
      @line=0
      @rownum=0
      @label=""
      @value=""
      @msg=""
      @header=""
      @footer=""
      @data=""
      @kennum=""
      @sinymd=""
      @kenymd=""
    end
  end

  def initialize(recefile)
    @info=Recinfo.new
    @errors=Array.new
    @filename=recefile
  end

  def empty?
    @errors.empty?
  end

  def push(errcd,*args)

    rece=args[0]
    csv=args[1]
    name=args[2]
    if csv && name && csv.hash.key?(name)
      key = csv[name].name
    end
    header=args[3]
    footer=args[4]
    info=nil

    err=Erorr_info.new

    if csv.nil?
    else
      err.line=csv.line
      err.receline=csv.receline
      err.data=csv.rows.join(",")
      if csv.hash.key?("RECID")
        err.recid=csv["RECID"].value
        id=csv["RECID"].value
        if @info.rec.key?(id)
          if @info[id].hash.key?(key)
            err.label =@info[id].hash[key].label
            err.value =csv[key].value
            err.rownum=@info[id].hash[key].rownum + 1
          end
        end
      end
    end

    if rece.nil?
    else
      rece.re.each{|re|

        err.ptnum   =re["PTNUM"].hankaku
        err.recenum =re["RECENUM"].hankaku
        err.name    =re["NAME"].zenkaku
        err.birthday=re["BIRTHDAY"].wYmdtos
        err.sryym   =wtos(rece.sryym)

        rece.ar.each{|ar|
          err.kennum =ar["KENNUM"].hankaku
          err.sinymd=ar["SINYMD"].wYmdtos
          err.kenymd=ar["KENYMD"].wYmdtos
          break
        }

        break
      }
    end

    if header.nil?
    else
       err.header = header
    end

    if footer.nil?
    else
       err.footer = footer
    end

    err.filename = @filename

    err.errcd=errcd
    case errcd
    when "10001"
      err.msg="アフターケア委託費請求書レコードが記録されていません。"
    when "10002"
      err.msg="アフターケア委託費請求書レコードが複数記録されてます。"
    when "10010"
      err.msg="労災診療費単価が記録されていません。"
    when "10020"
      err.msg="請求できない労災診療費単価が記録されています。"
    when "10050"
      err.msg="病院・診療所の区分が記録されていません。"
    when "10060"
      err.msg="請求できない病院・診療所の区分が記録されています。"
    when "10090"
      err.msg="請求書提出年月日が正しい暦年月日で記録されていません。"
    when "10100"
      err.msg="診察年月日または検査年月日（健康診断年月日）より前の請求書提出年月日が記録されています。"
    when "10130"
      err.msg="郵便番号が７桁の数字ではありません。"
    when "10140"
      err.msg="医療機関所在地が記録されていません。"
    when "10150"
      err.msg="医療機関責任者氏名が記録されていません。"
    when "10200"
      err.msg="指定病院等の番号が記録されていません。"
    when "10210"
      err.msg="指定病院等の番号が７桁の数字ではありません。"
    when "10310"
      err.msg="各レセプトのアフターケアレセプトレコードの合計額とアフターケア委託費請求書の請求金額が一致していません。"
    when "10320"
      err.msg="各レセプトの件数とアフターケア委託費請求書の内訳書添付枚数が一致していません。"
    when "10410"
      err.msg="令和２年１１月以前の診察年月日または検査年月日（健康診断年月日）が記録されています。"
    when "19100"
      err.msg="レセプト番号が６桁以内の数字ではありません。"
    when "19170"
      err.msg="医療機関単位のレセプト番号が「１」からの昇順ではありません。"
    when "19230"
      err.msg="医療機関情報レコードの次レコードが、レセプト共通レコード以外です。"
    when "19281"
      err.msg="医療機関情報レコードが記録されていません。"
    when "19282"
      err.msg="医療機関情報レコードが複数記録されています。"
    when "19283"
      err.msg="レセプト共通レコードが記録されていません。"
    when "19284"
      err.msg="請求年月が正しい暦年月ではありません。"
    when "20100"
      err.msg="労働者の氏名（カナ）が記録されていません。"
    when "20140"
      err.msg="傷病の経過が記録されていません。"
    when "20150"
      err.msg="小計点数が記録されていません。"
    when "20190"
      err.msg="帳票種別が記録されていません。"
    when "20200"
      err.msg="帳票種別の記録が誤っています。"
    when "20210"
      err.msg="次の項目は記録が必須の項目です。"
    when "20220"
      err.msg="使用できない診療科名が記録されています。"
    when "21590"
      err.msg="当該レセプトは、次月以降に請求可能となります。"
    when "21600"
      err.msg="診察年月日が正しい暦年月日ではありません。"
    when "21610"
      err.msg="検査年月日（健康診断年月日）が正しい暦年月日ではありません。"
    when "21611"
      err.msg="診療年月が正しい暦年月ではありません。"
    when "21630"
      err.msg="診察年月日と検査年月日（健康診断年月日）が同一年月日ではありません。"
    when "23040"
      err.msg="次の摘要レコードに記録できないコードが記録されています。"
    when "23060"
      err.msg="診療識別が昇順に記録されていません。"
    when "23070"
      err.msg="次の摘要レコードに記録できないコメントコードが記録されています。"
    when "23110"
      err.msg="次の摘要レコードの回数が記録されていないか又は０が記録されています。"
    when "23120"
      err.msg="点数・回数算定単位内の回数が一致していません。"
    when "23800"
      err.msg="コメントデータの修飾語コードの桁数が４の倍数ではありません。"
    when "23810"
      err.msg="コメントレコード以外に診療識別「０１」「９９」が記録されています。"
    when "23820"
      err.msg="１レセプト内に１０００レコード以上の症状詳記レコードが記録されています。９９９レコードを超える症状詳記レコードは記録できません。"
    when "23860"
      err.msg="摘要情報レコードのコメントデータの修飾語コードの桁数が４の倍数ではありません。"
    when "23870"
      err.msg="摘要情報レコードの修飾語コード数が６以上記録されています。５コードを超える修飾語コードは記録できません。"
    when "23880"
      err.msg="摘要情報レコードのコメントコードが記録されていません。"
    when "25390"
      err.msg="次の項目に、記録可能な桁数を超えるデータが記録されています。"
    when "25400"
      err.msg="レセプト情報（アフターケアレセプトレコード）が記録されていません。"
    when "25420"
      err.msg="次のレコードの項目数がレコード識別情報と一致しません。"
    when "25430"
      err.msg="次の項目の記録モードが誤っています。"
    when "25441"
      err.msg="次の項目に外字が記録されています。"
    when "25470"
      err.msg="アフターケアレセプトレコードが複数記録されています。"
    when "25530"
      err.msg="当該項目の桁数が不足しています。"
    when "25550"
      err.msg="摘要レコードが記録されていません。"
    when "26510"
      err.msg="再請求レセプトの電算処理受付番号が記録されていません。"
    when "28010"
      err.msg="使用できない傷病コードが記録されています。"
    when "28040"
      err.msg="診察年月日または検査年月日（健康診断年月日）のいずれかを記録してください。"
    when "28060"
      err.msg="健康管理手帳番号の傷病番号と異なる傷病コードが記録されています。"
    when "28500"
      err.msg="生年月日が正しい暦年月日で記録されていません。"
    when "30010"
      err.msg="労働者の氏名が記録されていません。"
    when "31330"
      err.msg="男女区分に誤ったコードが記録されています。"
    when "33031"
      err.msg="存在しないか又は現在有効でない摘要コード（診療コード、医薬品コード、特定器材コード又はコメントコード）が記録されています。"
    when "33040"
      err.msg="きざみ計算診療行為の数量データに対し０又は省略（スペース）が記録されました。"
    when "33060"
      err.msg="減点医薬品の減点点数が記録されていません。"
    when "33071"
      err.msg="点数の記録が必要な箇所ですが、点数が記録されていません。"
    when "33090"
      err.msg="医薬品の使用量に対し０又は省略（スペース）が記録されました。"
    when "33110"
      err.msg="特定器材の使用量に対し０又は省略（スペース）が記録されました。"
    when "33130"
      err.msg="特定器材の単価が記録されていません。"
    when "33170"
      err.msg="記録された数量データが下限値以下のため点数計算ができません。"
    when "33190"
      err.msg="減点医薬品のコードのみで点数を記録してください。"
    when "33930"
      err.msg="存在しない修飾語コードがコメントに記録されています。"
    when "34270"
      err.msg="当該コメントコードの文字データが誤って記録されています。"
    when "34280"
      err.msg="摘要レコードコメントの文字データが誤って記録されています。"
    when "34380"
      err.msg="文字データの記録が必要なコメントコードですが、文字データが記録されていません。"
    when "34390"
      err.msg="文字データが数字のみ又は数字と一部の記号のみ有効のコメントコードですが、文字データに数字又は数字、記号以外が含まれています。"
    when "34400"
      err.msg="記録された文字データの桁数が、当該コメントに記録すべき文字データの桁数と一致しないため、コメントが正しく作成できません。"
    when "34410"
      err.msg="摘要レコードコメントのコメントコードは文字データの記録が必要ですが、文字データが記録されていません。"
    when "34440"
      err.msg="摘要レコードコメントのコメントコードは文字データが数字のみ又は数字と一部の記号のみ有効ですが、文字データに数字又は数字、記号以外が含まれています。"
    when "34470"
      err.msg="摘要レコードコメントに記録された文字データの桁数が、当該コメントに記録すべき文字データの桁数と一致しないため、コメントが正しく作成できません。"
    when "34500"
      err.msg="摘要レコードコメントに存在しないコメントコードが記録されています。"
    when "34590"
      err.msg="存在しない修飾語コードが摘要レコードコメントに記録されています。"
    when "34650"
      err.msg="特定器材の単位コードに誤ったコードが記録されています。"
    when "36390"
      err.msg="病床数の記録が必要です。"
    when "37650"
      err.msg="重複した給付キーが存在します。"
    when "38040"
      err.msg="前回の検査年月日が正しい暦年月日で記録されていません。"
    when "38100"
      err.msg="生年月日前の診察年月日または検査年月日（健康診断年月日）が記録されています。"
    when "38351"
      err.msg="該当の診療行為に対して、金額と点数の両方が記録されていません。"
    when "38380"
      err.msg="該当の診療行為には金額の記録が必要ですが、金額に対し０又は省略（スペース）が記録されました。"
    when "38390"
      err.msg="該当の診療行為には金額の記録は不要ですが、金額が記録されています。"
    when "39120"
      err.msg="炭鉱災害による一酸化炭素中毒のレセプトで診察年月日と検査年月日（健康診断年月日）の両方に記録されています。"
    when "43230"
      err.msg="単位コードの記録が必要な特定器材ですが、単位コードが記録されていません。"
    when "44240"
      err.msg="診療所専用の診療行為が記録されています。"
    when "44350"
      err.msg="通則加算が記録されましたが、基本手技が記録されていません。"
    when "44360"
      err.msg="通則加算と注加算の記録順が誤っています。"
    when "46030"
      err.msg="病院専用の診療行為が記録されています。"
    when "46120"
      err.msg="同時算定不可の注加算が記録されています。"
    when "46410"
      err.msg="注加算の記録順序が誤っています。"
    when "46411"
      err.msg="基本項目に対して、算定できない注加算です。"
    when "48410"
      err.msg="小計点数が摘要データの点数の合計と一致していません。"
    when "48420"
      err.msg="小計点数金額換算（イ）が正しくありません。"
    when "48430"
      err.msg="小計金額（ロ）が摘要データの金額の合計と一致していません。"
    when "48450"
      err.msg="合計額（イ）＋（ロ）が「小計点数金額換算（イ）＋小計金額（ロ）」と一致していません。"
    end

    @errors << err

  end

  def write(outfile)
    open(outfile,"a"){|f|
      @errors.each_with_index{|err,i|
        errdata =  sprintf("<ERR_FILENAME>%s</ERR_FILENAME>",err.filename)
        errdata << sprintf("<ERR_RECENUM>%s</ERR_RECENUM>",err.recenum)
        errdata << sprintf("<ERR_PTNUM>%s</ERR_PTNUM>",err.ptnum)
        errdata << sprintf("<ERR_NAME>%s</ERR_NAME>",err.name)
        errdata << sprintf("<ERR_BIRTHDAY>%s</ERR_BIRTHDAY>",err.birthday)
        errdata << sprintf("<ERR_SRYYM>%s</ERR_SRYYM>",err.sryym)
        errdata << sprintf("<ERR_KENNUM>%s</ERR_KENNUM>",err.kennum)
        errdata << sprintf("<ERR_SINYMD>%s</ERR_SINYMD>",err.sinymd)
        errdata << sprintf("<ERR_KENYMD>%s</ERR_KENYMD>",err.kenymd)
        errdata << sprintf("<ERR_ERRCD>%s</ERR_ERRCD>",err.errcd)
        errdata << sprintf("<ERR_RECID>%s</ERR_RECID>",err.recid)
        errdata << sprintf("<ERR_RECELINE>%d</ERR_RECELINE>",err.receline)
        errdata << sprintf("<ERR_ROWNUM>%d</ERR_ROWNUM>",err.rownum)
        errdata << sprintf("<ERR_LABEL>%s</ERR_LABEL>",err.label)
        errdata << sprintf("<ERR_VALUE>%s</ERR_VALUE>",err.value)
        errdata << sprintf("<ERR_MSG>%s</ERR_MSG>",err.msg)
        errdata << sprintf("<ERR_HEADER>%s</ERR_HEADER>",err.header)
        errdata << sprintf("<ERR_FOOTER>%s</ERR_FOOTER>",err.footer)
        errdata << sprintf("<ERR_LINE>%d</ERR_LINE>",err.line)
        errdata << sprintf("<ERR_DATA>%s</ERR_DATA>",err.data)
        errdata << sprintf("\n",err.data)
        f.print NKF.nkf("-Wex -Lu", errdata)
      }
    }
  end

  def size
    @errors.size
  end

end
